-------------
LeetCode #217
-------------


O(nlog(n)) (Timsort), but saves memory:

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums = sorted(nums)
        for i in range(len(nums) - 1):
            if nums[i] == nums[i + 1]:
                return True
        return False



Bad:

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:        
        for i in range(len(nums) - 1):
            for j in range(i + 1, len(nums)):

                if nums[i] == nums[j]:
                    return True
        return False



Good, O(n) space and O(n) time:

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        if len(nums) == len(set(nums)):  # This, set(nums), causes O(n) space and time.
            return False
        return True
        
        
        
-------------
LeetCode #242
-------------


Good, O(n) time and O(1) space:

from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        return dict(Counter(s)) == dict(Counter(t))
        
        
        
