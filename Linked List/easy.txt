
-------------
LeetCode #206
-------------


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next


# Solution with pointers. O(n) time, O(1) space. A simple drawing:

| | s
  1-2-3-4
  
We should store (s) the next of the current pointer (on 1). That should be done before moving the current pointer 
and assigning its next attribute to the value of the previous pointer (on the drawing, it points to None).


class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        curr = head
        while curr:  # curr will eventually get to None (next attribute is set to None by default.)
            s = curr.next  # We store it, so that curr = s.
            curr.next = prev  # next backwards... we need prev for this.
            prev = curr  # prev to curr, curr to...
            curr = s  # the stored s.
        return prev





------------
LeetCode #21
------------


Merge two lists. They do not have to be linked. Two pointers solution but the left doesn't move and it is used to reference the head
via left.next, since if we don't have the head, we don't have the full (merged) list. left can be called a placeholder. 

To be specific, we use four pointers in total, including list1 and list2 as two heads. So actually, what make those lists linked lists 
are the lines:

list1 = list1.next
list2 = list2.next

because these two pointers, i.e. the heads: list1 and list2, are referencing the next node which is of the least higher value.


class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        left = ListNode()  # Dummy node. The head will be left.next.
        right = left
        while list1 and list2:  # This deals only with the case where both lists are not empty.
            if list1.val < list2.val:
                right.next = list1
                list1 = list1.next
            else:
                right.next = list2
                list2 = list2.next
            
            right = right.next

        # if list1:
        #     right.next = list1
        # elif list2:
        #     right.next = list2

        right.next = list1 or list2
        
        return left.next







-------------
LeetCode #141
-------------



We can use a hashmap of nodes (class objects, not values) to detect a cycle. However, this approach would require O(n) space. We can achieve 
a more space-efficient solution, i.e., O(1) space, by using Floyd's tortoise and hare algorithm. If there is a cycle and the fast (f) and slow 
(s) pointers are not in the same position, then, since we cannot escape the cycle once we enter it, the distance 'n' (a natural number) decreases 
by 1 after each iteration in which the slow pointer moves by one node and the fast pointer moves by two nodes. So the fast pointer, surpassing 
the slow, will eventually meet it. In a worst-case scenario, if the fast pointer starts just behind the slow one, the time complexity of detecting 
a cycle would be equivalent to the length of the cycle minus one. So the time complexity is O(n). It's O(1) space since we're only using pointers.

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
        return False




