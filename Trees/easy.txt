

-------------
LeetCode #100
-------------



Recursive DFS on binary trees. Same roots, same leaves, which are roots. If recursive, then several base cases.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        elif not p or not q:  # After the first condition failed, maximum one of these (p, q) are not true.
            return False
        elif p.val != q.val:  # After the second condition failed, the roots are not empty. So let's compare the values.
            return False
        
        # The recursive step:
        
        a = self.isSameTree(p.left, q.left)
        b = self.isSameTree(p.right, q.right)

        if a and b:
            return True
        else:
            return False
            
            
            
            
DFS - Depth-First Search. Recursive approach.

1. You use an implicit stack.
